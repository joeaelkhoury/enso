from Standard.Base import all
import Standard.Base.Errors.Common.No_Such_Method
import Standard.Base.Errors.Common.Type_Error
from Standard.Base.Data.Filter_Condition.Filter_Condition import all

import project.Data.Type.Value_Type.Value_Type
from project.Errors import Nothing_Value_In_Filter_Condition

## PRIVATE
   A helper function gathering the common logic that generates a boolean mask
   from a given source column and a filter condition. It contains logic common
   for all backends.

   It also performs validation and will throw errors if unexpected column types
   are encountered.
make_filter_column source_column filter_condition on_problems =
    base_column = case filter_condition of
        # Equality
        Equal value _ ->
            warn_on_nothing_in_comparison filter_condition value <|
                Warning.with_suspended source_column source_column->
                    Warning.with_suspended value value->
                        on_problems.escalate_warnings <|
                            source_column == value
        Not_Equal value _ ->
            warn_on_nothing_in_comparison filter_condition value <|
                Warning.with_suspended source_column source_column->
                    Warning.with_suspended value value->
                        on_problems.escalate_warnings <|
                            source_column != value
        # Nothing
        Is_Nothing _ -> source_column.is_nothing
        Not_Nothing _ -> source_column.is_nothing.not
        # Boolean
        Is_True _ -> Value_Type.expect_boolean source_column <| source_column
        Is_False _ -> Value_Type.expect_boolean source_column <| source_column.not
        # Comparisons
        Less value _ ->
            warn_on_nothing_in_comparison filter_condition value <|
                source_column < value
        Equal_Or_Less value _ ->
            warn_on_nothing_in_comparison filter_condition value <|
                source_column <= value
        Equal_Or_Greater value _ ->
            warn_on_nothing_in_comparison filter_condition value <|
                source_column >= value
        Greater value _ ->
            warn_on_nothing_in_comparison filter_condition value <|
                source_column > value
        Between lower upper _ ->
            warn_on_nothing_in_comparison filter_condition lower <|
                warn_on_nothing_in_comparison filter_condition upper <|
                    source_column.between lower upper
        # Text
        Equal_Ignore_Case value locale _ ->
            source_column.equals_ignore_case value locale
        Starts_With prefix case_sensitivity _ ->
            source_column.starts_with prefix case_sensitivity
        Ends_With suffix case_sensitivity _ ->
            source_column.ends_with suffix case_sensitivity
        Contains substring case_sensitivity _ ->
            source_column.contains substring case_sensitivity
        Not_Contains substring case_sensitivity _ ->
            source_column.contains substring case_sensitivity . not
        Is_Empty _ -> source_column.is_empty
        Not_Empty _ -> source_column.is_empty.not
        Like pattern _ -> source_column.like pattern
        Not_Like pattern _ -> source_column.like pattern . not
        # Numeric
        Is_Nan _ -> source_column.is_nan
        Is_Infinite _ -> source_column.is_infinite
        Is_Finite _ ->
            is_infinite_column = source_column.is_infinite
            is_nan_column = source_column.is_nan
            ## We check is_nan_column for error, since some Database backends may
               actually not support it and throw Unsupported_Database_Operation here.
            if is_nan_column.is_error then is_infinite_column.not else
                (is_infinite_column || is_nan_column).not
        # Vector
        Is_In values _ ->
            warn_on_nothing_in_comparison_vector filter_condition values <|
                source_column.is_in values
        Not_In values _ ->
            warn_on_nothing_in_comparison_vector filter_condition values <|
                source_column.is_in values . not
    if filter_condition.action == Filter_Action.Keep then base_column else base_column.not

## Attach a warning if the provided value is `Nothing`.
warn_on_nothing_in_comparison : Filter_Condition -> Any -> Any -> Any
warn_on_nothing_in_comparison filter_condition value ~action =
    case value of
        Nothing -> Warning.attach (Nothing_Value_In_Filter_Condition.Error filter_condition) action
        _ -> action

## Attach a warning if the provided value is a `Vector` that contains `Nothing`.
warn_on_nothing_in_comparison_vector : Filter_Condition -> Vector Any -> Any -> Any
warn_on_nothing_in_comparison_vector filter_condition values ~action =
    case values of
        _ : Vector ->
            values.fold action (flip (warn_on_nothing_in_comparison filter_condition))
        _ -> action
